<?xml version="1.0"?>

<project name="kafka" basedir="." default="all">
  <property file="build.properties" />
  <property name="name" value="kafka" />
  <property name="display.name" value="Kafka" />
  <property environment="env" />

  <path id="main-classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <pathelement path="${classes.dir}" />
  </path>
	
  <path id="test-classpath">
    <path refid="main-classpath" />
    <pathelement path="${testclasses.dir}" />
  </path>

  <macrodef name="replace-dir">
    <attribute name="dir" />
    <sequential>
      <delete dir="@{dir}" />
      <mkdir dir="@{dir}" />
    </sequential>
  </macrodef>
  
  <target name="init">
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${lib.dir}/scala-compiler-${scala.version}.jar"   />
        <pathelement location="${lib.dir}/scala-library-${scala.version}.jar"   />
      </classpath>
    </taskdef>
  </target>

  <target name="all" depends="clean, jar" description="Build all artifacts." />

  <target name="fsc" depends="clean, jar-fsc" description="Build all artifacts using the fast scala compiler." />

  <target name="clean" description="Delete generated files.">
    <delete dir="${dist.dir}" />
    <replace-dir dir="${javadoc.dir}" />
  </target>
  
  <target name="build-fsc" depends="init" description="Compile main source tree using the fast scala compiler">
    <replace-dir dir="${classes.dir}"   />
    <replace-dir dir="${testclasses.dir}" />
    <fsc srcdir="${src.dir}"
  	        destdir="${classes.dir}"
            classpathref="main-classpath"
            force="changed"
    	    target="jvm-1.5">
      <include name="**/*.scala"   />
    </fsc>
    <fsc srcdir="${unittestsrc.dir}"
            destdir="${testclasses.dir}"
            classpathref="test-classpath"
            force="changed"
	        target="jvm-1.5">
      <include name="**/*.scala"/>
    </fsc>
    <fsc srcdir="${othertestsrc.dir}"
            destdir="${testclasses.dir}"
            classpathref="test-classpath"
            force="changed"
            target="jvm-1.5">
      <include name="**/*.scala"/>
    </fsc>
    <copy file="${src.dir}/log4j.properties" todir="${dist.dir}" />
    <copy file="${test.dir}/log4j.properties" todir="${testclasses.dir}" />
  </target>

  <target name="build" depends="init" description="Compile main source tree">
    <replace-dir dir="${classes.dir}"   />
    <replace-dir dir="${testclasses.dir}" />
    <scalac srcdir="${src.dir}"
                destdir="${classes.dir}"
            classpathref="main-classpath"
            force="changed"
            target="jvm-1.5">
      <include name="**/*.scala"   />
    </scalac>
    <scalac srcdir="${unittestsrc.dir}"
            destdir="${testclasses.dir}"
            classpathref="test-classpath"
            force="changed"
                target="jvm-1.5">
      <include name="**/*.scala"/>
    </scalac>
    <scalac srcdir="${othertestsrc.dir}"
            destdir="${testclasses.dir}"
            classpathref="test-classpath"
            force="changed"
            target="jvm-1.5">
      <include name="**/*.scala"/>
    </scalac>
    <copy file="${src.dir}/log4j.properties" todir="${dist.dir}" />
    <copy file="${test.dir}/log4j.properties" todir="${testclasses.dir}" />
  </target>

  <target name="jar" depends="build" description="Build jar file">
    <jar destfile="${dist.dir}/${name}-${curr.release}.jar">
      <fileset dir="${classes.dir}">
        <include name="**/*.*" />
      </fileset>
    </jar>
    <jar destfile="${dist.dir}/${name}-test-${curr.release}.jar">
      <fileset dir="${testclasses.dir}">
        <include name="**/*.*" />
      </fileset>
    </jar>
  </target>

  <target name="jar-fsc" depends="build-fsc" description="Build jar file using the fast scala compiler">
    <jar destfile="${dist.dir}/${name}-${curr.release}.jar">
      <fileset dir="${classes.dir}">
        <include name="**/*.*" />
      </fileset>
    </jar>
    <jar destfile="${dist.dir}/${name}-test-${curr.release}.jar">
      <fileset dir="${testclasses.dir}">
        <include name="**/*.*" />
      </fileset>
    </jar>
  </target>

  <target name="test" depends="jar" description="Run junit tests.">
    <replace-dir dir="${testreport.dir}" />
    <replace-dir dir="${testhtml.dir}" />
    <junit printsummary="on" showoutput="true">
      <classpath refid="test-classpath" />
      <formatter type="xml" />
      <batchtest fork="yes" todir="${testreport.dir}">
        <fileset dir="${testclasses.dir}">
          <include name="**/*Test.class" />
          <exclude name="**/Abstract*.class" />
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${testhtml.dir}">
      <fileset dir="${testreport.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report todir="${testhtml.dir}" format="frames" />
    </junitreport>
  </target>

  <target name="test-fsc" depends="jar-fsc" description="Run junit tests using the fast scala compiler">
    <replace-dir dir="${testreport.dir}" />
    <replace-dir dir="${testhtml.dir}" />
    <junit printsummary="on" showoutput="true">
      <classpath refid="test-classpath" />
      <formatter type="xml" />
      <batchtest fork="yes" todir="${testreport.dir}">
        <fileset dir="${testclasses.dir}">
          <include name="**/*Test.class" />
          <exclude name="**/Abstract*.class" />
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${testhtml.dir}">
      <fileset dir="${testreport.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report todir="${testhtml.dir}" format="frames" />
    </junitreport>
  </target>

  <target name="ensure-test-name" unless="test">
    <fail message="You must run this target with -Dtest=TestName"/>
  </target>

  <target name="runtest" description="Runs the test you specify on the command 
    line with -Dtest=" depends="jar, ensure-test-name">
    <junit printsummary="withOutAndErr" showoutput="true"> 
        <classpath refid="test-classpath" />
        <formatter type="xml" />
        <batchtest fork="yes" todir="${testreport.dir}">
            <fileset dir="${testclasses.dir}">
                <include name="**/${test}.class"/>
            </fileset>
        </batchtest>
    </junit>
  </target>

 <macrodef name="create-release-artifacts">
    <attribute name="version" />
    <sequential>
    <antcall target="all"/>
    <zip destfile="${dist.dir}/${name}-@{version}.zip">
      <zipfileset dir="." prefix="kafka-@{version}" filemode="755" includes="bin/*"/>
      <zipfileset dir="." prefix="kafka-@{version}" includes="**">
        <exclude name="${dist.dir}/*classes/**"/>
        <exclude name="bin/*"/>
        <exclude name=".svn*/**"/>
        <exclude name=".git*/**"/>
      </zipfileset>
    </zip>
    <tar destfile="${dist.dir}/${name}-@{version}.tar.gz" compression="gzip" longfile="gnu">
      <tarfileset dir="." prefix="kafka-@{version}" filemode="755" includes="bin/*"/>
      <tarfileset dir="." prefix="kafka-@{version}" includes="**">
        <exclude name="${dist.dir}/*classes/**"/>
        <exclude name="${dist.dir}/*.zip"/>
        <exclude name="bin/*"/>
        <exclude name=".svn*/**"/>
        <exclude name=".git*/**"/>
      </tarfileset>
    </tar>
    </sequential>
  </macrodef>

  <target name="snapshot"  description="Create a release-snapshot zip file with everything pre-built.">
    <create-release-artifacts version="${curr.release.snapshot}" />
  </target>
 
  <target name="release" description="Create a release zip file with everything pre-built.">
    <create-release-artifacts version="${curr.release}" />
  </target>

  <target name="docs" depends="init">
    <mkdir dir="${docs.dir}"   />
    <scaladoc
      srcdir="${src.dir}"
      destdir="${docs.dir}"
      deprecation="yes"
      classpathref="main-classpath">
      <include name="**/*.scala"   />
    </scaladoc>
  </target>
</project>
